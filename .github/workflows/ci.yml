name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: root
          POSTGRES_DB: user-db

      rabbitmq:
        image: rabbitmq:3.8.6-management
        ports:
          - 5672:5672
          - 15672:15672

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: List directory structure
      - name: List directory structure
        run: ls -R

      # Step 3: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # Step 4: Build the JAR files
      - name: Build auth-service JAR
        run: mvn -f ./auth-service/pom.xml clean package

      - name: Build user-service JAR
        run: mvn -f ./user-service/pom.xml clean package

      - name: Build post-service JAR
        run: mvn -f ./post-service/pom.xml clean package

      - name: Build comment-service JAR
        run: mvn -f ./comment-service/pom.xml clean package

      - name: Build audit-service JAR
        run: mvn -f ./audit-service/pom.xml clean package

      # Step 5: Verify JAR files
      - name: Verify auth-service JAR
        run: ls -l ./auth-service/target/

      - name: Verify user-service JAR
        run: ls -l ./user-service/target/

      - name: Verify post-service JAR
        run: ls -l ./post-service/target/

      - name: Verify comment-service JAR
        run: ls -l ./comment-service/target/

      - name: Verify audit-service JAR
        run: ls -l ./audit-service/target/

      # Step 6: Set up Docker Buildx (optional for multi-arch builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 7: Log in to Docker Hub (if you want to push the images to Docker Hub)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 8: Build Docker images for each service
      - name: Build auth-service image
        run: |
          docker build -t auth-service:latest ./auth-service

      - name: Build user-service image
        run: |
          docker build -t user-service:latest ./user-service

      - name: Build post-service image
        run: |
          docker build -t post-service:latest ./post-service

      - name: Build comment-service image
        run: |
          docker build -t comment-service:latest ./comment-service

      - name: Build audit-service image
        run: |
          docker build -t audit-service:latest ./audit-service

      # Step 9: (Optional) Push the images to Docker Hub
      - name: Push auth-service image
        run: |
          docker tag auth-service:latest ${{ secrets.DOCKER_USERNAME }}/auth-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/auth-service:latest

      - name: Push user-service image
        run: |
          docker tag user-service:latest ${{ secrets.DOCKER_USERNAME }}/user-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/user-service:latest

      - name: Push post-service image
        run: |
          docker tag post-service:latest ${{ secrets.DOCKER_USERNAME }}/post-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/post-service:latest

      - name: Push comment-service image
        run: |
          docker tag comment-service:latest ${{ secrets.DOCKER_USERNAME }}/comment-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/comment-service:latest

      - name: Push audit-service image
        run: |
          docker tag audit-service:latest ${{ secrets.DOCKER_USERNAME }}/audit-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/audit-service:latest
